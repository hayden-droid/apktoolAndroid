apply plugin: 'AndResGuard'

project.afterEvaluate {
    def date = new Date().format("MMdd-HH-mm-ss")
    def andResGuardApkSuffix = "andresguard.apk"

    def apkSuffix = "_signed_7zip_aligned.apk"

    /**
     * bak apk and mapping
     */
    android.applicationVariants.all { variant ->
        /**
         * task type, you want to bak
         */
        def taskName = variant.name
        String name = variant.name.toLowerCase()
        String destFilePrefix = "${project.name}-${name}"

        // find resguard task first
        def resguardTask = project.tasks.findByName("resguard${taskName.capitalize()}")
        if (resguardTask == null) {
            println("resguardTask not found, just return!!!")
            return
        } else {
            println("====== resguardTask found:" + resguardTask)
        }

        def tinkerPatchTask = project.tasks.findByName("tinkerPatch${taskName.capitalize()}")
        if (tinkerPatchTask == null) {
            println("tinkerPatchTask not found, just return!!!")
            return
        } else {
            println("====== tinkerPatchTask found:" + tinkerPatchTask)
        }

        resguardTask.doFirst {
            println("====== old project.extensions.andResGuard.mappingFile:" + project.extensions.andResGuard.mappingFile)
            def resMapping = "/${taskName}/${project.name}-${taskName}-resource_mapping.txt"
            File mapping = new File(resMapping)
            if (mapping.exists()) {
                println("change resguardTask mapping file to ${resMapping}")
                project.extensions.andResGuard.mappingFile = file(resMapping)
            }
            else{
                println("====== " + resMapping + " not exists!!!")
            }
        }


        println("====== project.extensions.tinkerPatch.oldApk:" + project.extensions.tinkerPatch.oldApk)

        File oldBuildApk = new File(tinkerPatchTask.buildApkPath)

        def andResGuardFolderName = ("AndResGuard_" + oldBuildApk.name).replace(".apk", "")
        File andResGuardFolder = new File(oldBuildApk.parent, andResGuardFolderName)
        def aligned_signedApk = "_aligned_signed.apk"
        aligned_signedApk = oldBuildApk.name.replace(".apk", aligned_signedApk)
        File aligned_signedApkFile = new File(andResGuardFolder, aligned_signedApk)

        def buildApkPath = "${buildDir}/outputs/apk/AndResGuard_${project.getName()}-${taskName}/${project.getName()}-${taskName}${apkSuffix}"
        println("====== buildApkPath:" + buildApkPath)
        println("====== tinkerPatchTask.buildApkPath:" + tinkerPatchTask.buildApkPath)
        tinkerPatchTask.buildApkPath = aligned_signedApkFile.getAbsolutePath()
        println("====== new tinkerPatchTask.buildApkPath:" + tinkerPatchTask.buildApkPath)
        tinkerPatchTask.doFirst {
            println("====== tinkerPatchTask  doFirst begin")
            println("====== tinkerPatchTask.buildApkPath  " + tinkerPatchTask.buildApkPath)
        }



        /*
        tinkerPatchTask.doFirst {

            def buildApkPath = "${buildDir}/outputs/apk/AndResGuard_${project.getName()}-${taskName}/${project.getName()}-${taskName}${apkSuffix}"
            //println("******************" + buildApkPath)
            if (!file(buildApkPath).exists()) {
                // AndResGuard use the different suffix when apk using v2SignatureSchema
                apkSuffix = "_aligned_signed.apk"
                buildApkPath = "${buildDir}/outputs/apk/AndResGuard_${project.getName()}-${taskName}/${project.getName()}-${taskName}${apkSuffix}"
                println("%%%%%%%%%%%%%%%%" + buildApkPath)
            }

            println("change tinkerPatchTask buildApkPath to resugurad output ${buildApkPath}")
            tinkerPatchTask.buildApkPath = buildApkPath

            def bakPath = file("${buildDir}/bakApk/")
            println("change tinkerPatchTask baseApk to ${destFilePrefix}-${andResGuardApkSuffix}")
            //project.extensions.tinkerPatch.oldApk = "${bakPath}/${baseInfo}/${variantName}/${destFilePrefix}-${andResGuardApkSuffix}"

        }
        */
        println("====== " + tinkerPatchTask.name + "<<<<<<<<"  + resguardTask.name)
        tinkerPatchTask.dependsOn resguardTask


        //resguardTask.doLast {}
    }
}
/*
def bakPath = project.ext.TP_BAKPATH
def baseInfo = project.ext.TP_BASEINFO
def variantName = project.ext.TP_VARIANTNAME


project.afterEvaluate {
    def date = new Date().format("MMdd-HH-mm-ss")
    def andResGuardApkSuffix = "andresguard.apk"

    def apkSuffix = "_signed_7zip_aligned.apk"

    // bak apk and mapping
    android.applicationVariants.all { variant ->

        //task type, you want to bak
        def taskName = variant.name
        String name = variant.name.toLowerCase()
        String destFilePrefix = "${project.name}-${name}"

        // find resguard task first
        def resguardTask = project.tasks.findByName("resguard${taskName.capitalize()}")
        if (resguardTask == null) {
            println("resguardTask not found, just return")
            return
        }

        def tinkerPatchTask = project.tasks.findByName("tinkerPatch${taskName.capitalize()}")
        if (tinkerPatchTask == null) {
            println("resguardTask not found, just return")
            return
        }

        resguardTask.doFirst {
            def resMapping = "${bakPath}/${baseInfo}/${taskName}/${project.name}-${taskName}-resource_mapping.txt"
            File mapping = new File(resMapping)
            if (mapping.exists()) {
                println("change resguardTask mapping file to ${resMapping}")
                project.extensions.andResGuard.mappingFile = file(resMapping)
            }
        }
        tinkerPatchTask.doFirst {

            def buildApkPath = "${buildDir}/outputs/apk/AndResGuard_${project.getName()}-${taskName}/${project.getName()}-${taskName}${apkSuffix}"
            if (!file(buildApkPath).exists()) {
                // AndResGuard use the different suffix when apk using v2SignatureSchema
                apkSuffix = "_aligned_signed.apk"
                buildApkPath = "${buildDir}/outputs/apk/AndResGuard_${project.getName()}-${taskName}/${project.getName()}-${taskName}${apkSuffix}"
            }

            println("change tinkerPatchTask buildApkPath to resugurad output ${buildApkPath}")
            tinkerPatchTask.buildApkPath = buildApkPath

            println("change tinkerPatchTask baseApk to ${destFilePrefix}-${andResGuardApkSuffix}")
            project.extensions.tinkerPatch.oldApk = "${bakPath}/${baseInfo}/${variantName}/${destFilePrefix}-${andResGuardApkSuffix}"

        }
        tinkerPatchTask.dependsOn resguardTask

        resguardTask.doLast {
            String buildType = variant.buildType.name.toLowerCase()

            if (!name.equalsIgnoreCase(buildType) && name.endsWith(buildType)) {
                name = name - buildType + "-${buildType}"
            }

            String mAppVersion = project.extensions.tinkerpatchSupport.appVersion

            String destPath = "${bakPath}/${project.name}-${mAppVersion}-${date}/${name}/"

            copy {
                def apkPath = "${buildDir}/outputs/apk/AndResGuard_${project.getName()}-${taskName}/${project.getName()}-${taskName}${apkSuffix}"
                if (!file(apkPath).exists()) {
                    // AndResGuard use the different suffix when apk using v2SignatureSchema
                    apkSuffix = "_aligned_signed.apk"
                    apkPath = "${buildDir}/outputs/apk/AndResGuard_${project.getName()}-${taskName}/${project.getName()}-${taskName}${apkSuffix}"
                }
                from apkPath
                into file("${destPath}/")
                rename { String fileName ->
                    fileName.replace("${project.getName()}-${taskName}${apkSuffix}", "${destFilePrefix}-${andResGuardApkSuffix}")
                }

                from "${buildDir}/outputs/apk/AndResGuard_${project.getName()}-${taskName}/resource_mapping_${project.getName()}-${taskName}.txt"
                into file("${destPath}/")
                rename { String fileName ->
                    fileName.replace("resource_mapping_${project.getName()}-${taskName}.txt", "${destFilePrefix}-resource_mapping.txt")
                }
            }
        }
    }

}
*/

andResGuard {
    //mappingFile = file("./resource_mapping.txt")
    mappingFile = null
    use7zip = false//于发布于Google Play的APP，建议不要使用7Zip压缩，因为这个会导致Google Play的优化Patch算法失效
    useSign = true
    // 打开这个开关，会keep住所有资源的原始路径，只混淆资源的名字
    keepRoot = true
    whiteList = [
            //for launcher icon
            "com.folderv.apktool.R.drawable.ic_launcher",
            "com.folderv.apktool.R.mipmap.ic_launcher",
            "com.folderv.apktool.R.mipmap.ic_launcher_round",
            "com.folderv.apktool.R.mipmap.ic_launcher_foreground",
            //for fabric
            "com.folderv.apktool.R.string.com.crashlytics.*",
            //for umeng update
            "com.folderv.apktool.R.string.umeng*",
            "com.folderv.apktool.R.string.UM*",
            "com.folderv.apktool.R.string.tb_*",
            "com.folderv.apktool.R.layout.umeng*",
            "com.folderv.apktool.R.layout.tb_*",
            "com.folderv.apktool.R.drawable.umeng*",
            "com.folderv.apktool.R.drawable.tb_*",
            "com.folderv.apktool.R.anim.umeng*",
            "com.folderv.apktool.R.color.umeng*",
            "com.folderv.apktool.R.color.tb_*",
            "com.folderv.apktool.R.style.*UM*",
            "com.folderv.apktool.R.style.umeng*",
            "com.folderv.apktool.R.id.umeng*",

            // for your icon
            "R.drawable.ic_launcher",
            // for fabric
            "R.string.com.crashlytics.*",
            // for umeng update
            "R.string.umeng*",
            "R.string.UM*",
            "R.string.tb_*",
            "R.layout.umeng*",
            "R.layout.tb_*",
            "R.drawable.umeng*",
            "R.drawable.tb_*",
            "R.anim.umeng*",
            "R.color.umeng*",
            "R.color.tb_*",
            "R.style.*UM*",
            "R.style.umeng*",
            "R.id.umeng*",
            // umeng share for sina
            "R.drawable.sina*",
            // for google-services.json
            "R.string.google_app_id",
            "R.string.gcm_defaultSenderId",
            "R.string.default_web_client_id",
            "R.string.ga_trackingId",
            "R.string.firebase_database_url",
            "R.string.google_api_key",
            "R.string.google_crash_reporting_api_key",
            // umeng share for facebook
            "R.layout.*facebook*",
            "R.id.*facebook*",
            // umeng share for messager
            "R.layout.*messager*",
            "R.id.*messager*",
            // umeng share commond
            "R.id.progress_bar_parent",
            "R.id.webView"
    ]
    compressFilePattern = [
            "*.png",
            "*.jpg",
            "*.jpeg",
            "*.gif"
    ]
    sevenzip {
        artifact = "com.tencent.mm:SevenZip:$AndResGuardVersion"
        //path = "/usr/local/bin/7za"
    }
    //zipAlignPath = '/Users/quentin/Library/Android/sdk/build-tools/25.0.1/zipalign'
    //sevenZipPath = '/usr/local/bin/7za'
}

