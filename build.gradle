// Top-level build file where you can add configuration options common to all sub-projects/modules.

buildscript {
    ext.kotlin_version = '1.6.10'
    ext.aliMaven = false

    repositories {
        google()
        jcenter()
    }
    dependencies {
        classpath 'com.android.tools.build:gradle:7.0.4'
        classpath ("org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version")
        classpath ("org.jetbrains.kotlin:kotlin-android-extensions:$kotlin_version")

        // NOTE: Do not place your application dependencies here; they belong
        // in the individual module build.gradle files

        //classpath ('com.tencent.tinker:tinker-patch-gradle-plugin:1.9.8')
    }
}

allprojects {
    repositories {
        google()
        mavenCentral()
        jcenter()
//        maven {
//            url  "http://dl.bintray.com/lukaville/maven"
//        }
//        maven{
//            url 'https://maven.aliyun.com/repository/jcenter'
//        }
//        maven{
//            url 'https://maven.aliyun.com/repository/google'
//        }
        maven { url "https://jitpack.io" }
    }
}

subprojects {
    ext.global_compileSdkVersion = 32
    ext.global_buildToolsVersion = "32.0.0"
    ext.AndResGuardVersion = '1.2.20'
    ext.smaliVersion = '2.4.0'
    ext.minSdkVer = 19
}

task clean(type: Delete) {
    delete rootProject.buildDir
}


def getRevision() {
    if (System.env.BUILD_REVISION) {
        return System.env.BUILD_REVISION
    }
    if (System.env.GIT_REVISION) {
        return System.env.GIT_REVISION
    }
    if (System.env.MERCURIAL_REVISION) {
        System.env.MERCURIAL_REVISION
    }

    def ver = null;
    try {
        ver = 'git rev-parse --short HEAD'.execute().text.trim()
    } catch (e) {
        // ignore
    }
    if (!ver) {
        try {
            ver = 'hg id -i -b -t'.execute().text.split(' ')[0];
        } catch (e) {
            // ignore
        }
    }
    if (!ver) {
        ver = "HEAD"
    }
    return ver
}